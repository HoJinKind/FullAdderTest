module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    output spi_miso,        // AVR SPI MISO
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    output avr_rx,          // AVR RX (FPGA TX)
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    output a,                //a,b,c,sum,carry are define in Constraints "custom.ucf"
    output b,
    output c,
    input sum,
    input carry
    
  ) {
  
  sig rst;                  // reset signal
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    
    fsm state = {MANUAL,AUTO,ERROR };
    /*define 3 states, being manual state auto state and error. 
    error state can only be triggered by invalid input */                                      
  }
 
  dff  counter[29](.clk(clk), .rst(rst));//define flip flop to 29 bits wide
  var z;//define tester 
  always {
    
    counter.d =counter.q +1;
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    z = 2b00;//set to 00
    a=0;
    b=0;
    c=0;
    //set output to 0
    
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
 
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;  
  
    case (state.q) {
        state.MANUAL:
 
          a = io_dip[0][0];
          b = io_dip[0][1];
          c = io_dip[0][2];
           //set output to be equal to input, for case of manual
        
          io_led[0][0] = io_dip[0][0];
          io_led[0][1] = io_dip[0][1];
          io_led[0][2] = io_dip[0][2];
          //set led on mojo to be equal to input
        
          z = c{carry,sum };  
          if(io_dip[0][0]+io_dip[0][1]+io_dip[0][2] == z){
            io_led[0][5] = 0;  
          }
          
          else{ 
            io_led[0][5] = 1;
          }
        
          if(io_dip[0][0]+io_dip[0][1]+io_dip[0][2] != z){
            state.d = state.ERROR;
          }
          
          else if(io_dip[0][3]==1){
            state.d = state.AUTO;
          }
          else  {
            state.d = state.MANUAL;
          }
        
      state.AUTO:
        a = counter.q[28];
        b = counter.q[27];
        c = counter.q[26];
        
        io_led[0][0] = counter.q[28];
        io_led[0][1] = counter.q[27];
        io_led[0][2] = counter.q[26];
        
        z = c{carry,sum };  
        if(counter.q[28]+counter.q[27]+counter.q[26] == z){
          io_led[0][5] = 0;  
          }
        else{ io_led[0][5] = 1;}
        
        if(io_dip[0][0]+io_dip[0][1]+io_dip[0][2] != z){
          state.d = state.ERROR;
          }
        else if(io_dip[0][3]==1){
          state.d = state.AUTO;
        }
        else  {
          state.d = state.MANUAL;
        }
        
      state.ERROR:
        state.d = state.ERROR;
          
    }      
  }
}